#!/bin/bash

declare -A __ARCH_MAP=( [armv7l]=armhf [aarch64]=arm64 )

bootstrap() {
    local ARCH=$( get_option ARCH )
    local DIST=$( get_option DIST )

    if [ ! ${__ARCH_MAP[$ARCH]+_} ]
    then
        fail "Invalid architecture $ARCH for bootstrapping $DIST"
    fi

    local BOOTSTRAP_ARCH=${__ARCH_MAP[$ARCH]}
    debug "Mapped $ARCH to $BOOTSTRAP_ARCH"

    local PATH_CACHE=$( get_path BOOTSTRAP )
    debug "Caching path for bootstrap is $PATH_CACHE"

    if [[ $( contains_option FORCE_BOOTSTRAP ) == 1 ]]
    then
        debug "Recreating bootstrap for $DIST ($ARCH)"

        if [ -d $PATH_CACHE ]
        then
            rm -r $PATH_CACHE
        fi
    fi

    if [ ! -d $PATH_CACHE ]
    then
        debug "Caching bootstrap for $DIST ($ARCH) in $PATH_CACHE"
        mkdir -p $PATH_CACHE

        case $DIST in
            ubuntu)
                LANG=C debootstrap --arch=$BOOTSTRAP_ARCH focal $PATH_CACHE http://ports.ubuntu.com/
            ;;
            debian)
                LANG=C debootstrap --variant=minbase --arch=$BOOTSTRAP_ARCH buster $PATH_CACHE http://deb.debian.org/debian/
            ;;
        esac
    fi

    rsync -aHAX --info=progress2 $PATH_CACHE/ $( get_path BUILD )
}

create_fs() {
    # for testing - delete after
    # end for testing - delete before

    __copy_common_files
    __copy_distribution_files
    __write_hostname
    __write_hosts

    __update_distribution
    __install_additional_packages
    __setup_distribution
    __cleanup_distribution

    __copy_boot_files
    __extract_downloads
    __extract_system_files
    __adjust_config_files
    __update_initramfs
    __run_system_postinstall
}

__chroot_cmd() {
    local PATH_BUILD=$( get_path BUILD )

    __init_chroot

    debug "Running 'chroot $*' on $PATH_BUILD"
    chroot $PATH_BUILD "$@"

    __destroy_chroot
}

__init_chroot() {
    local PATH_BUILD=$( get_path BUILD )

    debug "Initializing chroot on build path $PATH_BUILD"

    mount -o ro,bind /etc/resolv.conf ${PATH_BUILD}/etc/resolv.conf
    mount -o bind /dev ${PATH_BUILD}/dev
    mount -o bind /dev/pts ${PATH_BUILD}/dev/pts
    mount -t sysfs /sys ${PATH_BUILD}/sys
    mount -t proc /proc ${PATH_BUILD}/proc
}

__destroy_chroot() {
    local PATH_BUILD=$( get_path BUILD )

    debug "Destroying chroot on build path $PATH_BUILD"

    umount ${PATH_BUILD}/proc
    umount ${PATH_BUILD}/sys
    umount ${PATH_BUILD}/dev/pts
    umount ${PATH_BUILD}/dev
    umount ${PATH_BUILD}/etc/resolv.conf
}

__write_hostname() {
    local PATH_BUILD=$( get_path BUILD )

    if [[ $( contains_option HOSTNAME ) == 1 ]]
    then
        local HOSTNAME=$( get_option HOSTNAME )
    else
        local HOSTNAME=changeme
    fi

    echo $HOSTNAME > $PATH_BUILD/etc/hostname
}

__write_hosts() {
    local PATH_BUILD=$( get_path BUILD )

    if [[ $( contains_option HOSTNAME ) == 1 ]]
    then
        local HOSTNAME=$( get_option HOSTNAME )
    else
        local HOSTNAME=changeme
    fi

    cat <<EOF > $PATH_BUILD/etc/hosts
127.0.0.1	localhost
127.0.1.1	${HOSTNAME}

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
EOF
}

__copy_common_files() {
    __copy_files "common"
}

__copy_distribution_files() {
    local DIST=$( get_option DIST )

    __copy_files $DIST
}

__copy_files() {
    local SUBDIR=$1
    local PATH_FILES=$( get_path FILES )
    local PATH_BUILD=$( get_path BUILD )

    rsync -aHAXI --info=progress2 $PATH_FILES/distribution/$SUBDIR/ $PATH_BUILD
}

__update_distribution() {
    __chroot_cmd apt-get update
    __chroot_cmd apt-get -yq upgrade
}

__install_additional_packages() {
    local DIST=$( get_option DIST )

    case $DIST in
        ubuntu)
            __chroot_cmd apt-get -yq install openssh-server dosfstools initramfs-tools
        ;;
        debian)
            __chroot_cmd apt-get -yq install locales vim openssh-server sudo net-tools ifupdown iputils-ping kmod less rsync u-boot-tools usbutils dosfstools mesa-utils mesa-utils-extra console-data task-xfce-desktop xserver-xorg-input-synaptics blueman firmware-linux-free firmware-linux firmware-linux-nonfree firmware-brcm80211 firmware-samsung firmware-libertas pulseaudio pavucontrol lvm2 cryptsetup-bin libllvm7
        ;;
        *) ;;
    esac
}

__setup_distribution() {
    __chroot_cmd systemctl enable ssh
    __chroot_cmd systemctl disable fstrim.timer
    # in case you want to disable automatic updates
    #__chroot_cmd systemctl disable apt-daily
    #__chroot_cmd systemctl disable apt-daily-upgrade

    __chroot_cmd useradd -c linux -d /home/linux -m -p '$6$sEhhlter$njAiCsaYr7lveaAQCmsABlrGbrVip/lcBUlY2M9DUHfaUh0zSLfcJ4mN0BDqH7bg/2BITbp7BK3qPf8zR.3Ad0' -s /bin/bash linux
    __chroot_cmd usermod -a -G sudo linux
    __chroot_cmd usermod -a -G audio linux
    __chroot_cmd usermod -a -G video linux

    # setup locale info for en-us
    __chroot_cmd sed -i 's,# en_US ISO-8859-1,en_US ISO-8859-1,g;s,# en_US.UTF-8 UTF-8,en_US.UTF-8 UTF-8,g' /etc/locale.gen
    __chroot_cmd locale-gen
}

__cleanup_distribution() {
    __chroot_cmd apt-get -yq auto-remove
    __chroot_cmd apt-get clean
}

__copy_boot_files() {
    local PATH_BUILD=$( get_path BUILD )
    local PATH_FILES=$( get_path FILES )
    local ARCH=$( get_option ARCH )
    local SYSTEM=$( get_option SYSTEM )

    if [ -d $PATH_FILES/boot/boot-$SYSTEM-$ARCH ]
    then
        rsync -aHAX --info=progress2 $PATH_FILES/boot/boot-$SYSTEM-$ARCH/ $PATH_BUILD/boot
    fi
}

__extract_downloads() {
    local PATH_DOWNLOAD=$( get_path DOWNLOAD )
    local PATH_BUILD=$( get_path BUILD )
    local DIST=$( get_option DIST )
    local ARCH=$( get_option ARCH )
    local SYSTEM=$( get_option SYSTEM )
    local O_WD=$( pwd )
    
    cd $PATH_BUILD/lib
    tar --numeric-owner --strip-components=2 -xzf $PATH_DOWNLOAD/kernel-$SYSTEM-$ARCH.tar.gz ./lib/modules

    cd $PATH_BUILD
    if [ -f $PATH_DOWNLOAD/kernel-mali-$SYSTEM-$ARCH.tar.gz ]
    then
        tar --numeric-owner -xzf $PATH_DOWNLOAD/kernel-mali-$SYSTEM-$ARCH.tar.gz
    fi

    if [ -f $PATH_DOWNLOAD/opengl-$SYSTEM-$ARCH.tar.gz ]
    then
        tar --numeric-owner -xzf $PATH_DOWNLOAD/opengl-$SYSTEM-$ARCH.tar.gz
    fi

    if [ -f $PATH_DOWNLOAD/opengl-fbdev-$SYSTEM-$ARCH.tar.gz ]
    then
        tar --numeric-owner -xzf $PATH_DOWNLOAD/opengl-fbdev-$SYSTEM-$ARCH.tar.gz
    fi

    if [ -f $PATH_DOWNLOAD/opengl-wayland-$SYSTEM-$ARCH.tar.gz ]
    then
        tar --numeric-owner -xzf $PATH_DOWNLOAD/opengl-wayland-$SYSTEM-$ARCH.tar.gz
    fi

    if [ -f $PATH_DOWNLOAD/opengl-mesa-$ARCH-$DIST.tar.gz ]
    then
        tar --numeric-owner -xzf $PATH_DOWNLOAD/opengl-mesa-$ARCH-$DIST.tar.gz
    fi

    if [ -f $PATH_DOWNLOAD/xorg-armsoc-$ARCH-$DIST.tar.gz ]
    then
        tar --numeric-owner -xzf $PATH_DOWNLOAD/xorg-armsoc-$ARCH-$DIST.tar.gz
    fi

    if [ -f $PATH_DOWNLOAD/gl4es-$ARCH-$DIST.tar.gz ]
    then
        tar --numeric-owner -xzf $PATH_DOWNLOAD/gl4es-$ARCH-$DIST.tar.gz
    fi

    cd $O_WD
}

__extract_system_files() {
    local PATH_BUILD=$( get_path BUILD )
    local PATH_FILES=$( get_path FILES )
    local DIST=$( get_option DIST )
    local ARCH=$( get_option ARCH )
    local SYSTEM=$( get_option SYSTEM )
    local O_WD=$( pwd )

    local PATH_SYSTEM_FILES=$PATH_FILES/systems/$SYSTEM

    local SOURCE=$PATH_SYSTEM_FILES/extra-files-$SYSTEM-$ARCH
    if [ -d $SOURCE ]; then
        rsync -aHAXI --info=progress2 $SOURCE/ $PATH_BUILD
    fi

    SOURCE=$PATH_SYSTEM_FILES/extra-files-$SYSTEM-$ARCH-$DIST
    if [ -d $SOURCE ]; then
        rsync -aHAXI --info=progress2 $SOURCE/ $PATH_BUILD
    fi
    
    local RC_LOCAL_FILE=$PATH_BUILD/etc/rc.local
    if [ -f $PATH_SYSTEM_FILES/rc-local-additions-$SYSTEM-$ARCH-$DIST.txt ]; then
        echo "" >> $RC_LOCAL_FILE
        echo "# additions for $SYSTEM-$ARCH-$DIST" >> $RC_LOCAL_FILE
        echo "" >> $$RC_LOCAL_FILE
        cat $PATH_SYSTEM_FILES/rc-local-additions-$SYSTEM-$ARCH-$DIST.txt >> $RC_LOCAL_FILE
    fi

    echo "" >> $RC_LOCAL_FILE
    echo "exit 0" >> $RC_LOCAL_FILE
}

__adjust_config_files() {
    local PATH_BUILD=$( get_path BUILD )

    if [ -f $PATH_BUILD/etc/modules-load.d/cups-filters.conf ]; then
        sed -i 's,^lp,#lp,g' $PATH_BUILD/etc/modules-load.d/cups-filters.conf
        sed -i 's,^ppdev,#ppdev,g' $PATH_BUILD/etc/modules-load.d/cups-filters.conf
        sed -i 's,^parport_pc,#parport_pc,g' $PATH_BUILD/etc/modules-load.d/cups-filters.conf
    fi

    if [ -f $PATH_BUILD/etc/NetworkManager/NetworkManager.conf ]; then
        sed -i 's,^managed=false,managed=true,g' $PATH_BUILD/etc/NetworkManager/NetworkManager.conf
        touch $PATH_BUILD/etc/NetworkManager/conf.d/10-globally-managed-devices.conf
    fi

    if [ -f $PATH_BUILD/etc/default/numlockx ]; then
        sed -i 's,^NUMLOCK=auto,NUMLOCK=off,g' $PATH_BUILD/etc/default/numlockx
    fi
}

__update_initramfs() {
    local PATH_BUILD=$( get_path BUILD )
    local KERNEL_VERSION=`ls $PATH_BUILD/boot/*Image-* | sed 's,.*Image-,,g' | sort -u`

    local FSCK_ORIGIN=$PATH_BUILD/usr/share/initramfs-tools/hooks/fsck
    local FSCK_BACKUP=$PATH_BUILD/tmp/fsck.org

    # hack to get the fsck binaries in properly even in our chroot env
    cp -f $FSCK_ORIGIN $FSCK_BACKUP
    sed -i 's,fsck_types=.*,fsck_types="vfat ext4",g' $FSCK_ORIGIN
    __chroot_cmd update-initramfs -c -k $KERNEL_VERSION
    mv -f $FSCK_BACKUP $FSCK_ORIGIN
}

__run_system_postinstall() {
    local PATH_BUILD=$( get_path BUILD )
    local PATH_FILES=$( get_path FILES )
    local DIST=$( get_option DIST )
    local ARCH=$( get_option ARCH )
    local SYSTEM=$( get_option SYSTEM )
    local O_WD=$( pwd )

    local PATH_SYSTEM_FILES=$PATH_FILES/systems/$SYSTEM
    local POSTINSTALL_SCRIPT=$PATH_SYSTEM_FILES/postinstall-$SYSTEM-$ARCH-$DIST.sh

    if [ -x $POSTINSTALL_SCRIPT ]; then
        cd $PATH_BUILD
        $POSTINSTALL_SCRIPT
        cd $O_WD
    fi

    __chroot_cmd ldconfig
}